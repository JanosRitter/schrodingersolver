#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Mar  4 16:02:58 2022

@author: janos
"""
"""
This is an executable script that uses the modules _fileio,
_interpolation, graphics, and solvers to solve the Schrodingers
equation and graphicate the results
"""


import os
import numpy as np
from moduls.filemanager import _read_schrodinger2, filesaver, plotfilereader
from moduls._interpol import Interpolation
from moduls.solver import solver, calculate_expvalues
from moduls.graphicsplotter import plotting


def schrodinger_solver(dirname):
    """
    Solves the 1D Schrodinger's time-independent equation
    for any type of potential and graphicates its solution. The
    output graphs are shown on screen after executing the program and
    the data generated by solving the Schrodinger's equation is written
    in a series of output files (potentials.dat, energies.dat, wavefuncs.dat,
    and expvalues.dat). It needs an input file named schrodinger.inp with
    the data needed to solve the equation. The schrodinger.inp file needs to
    have following format:

        (float) # mass
        (float) (float) (int) # xMin xMax nPoint
        (int) (int) # first and last eigenvalue to print
        (str(can be linear, polynomial, or cspline)) # interpolation type
        (int) # nr. of interpolation points and xy declarations
        (float) (float)
        ...

    Example:
        2.0 # mass
        -20.0 20.0 1999 # xMin xMax nPoint
        1 16 # first and last eigenvalue to include in the output
        linear # interpolation type
        8 # nr. of interpolation points and xy declarations
        -20.0 100.0
        -8.0 -1.5
        -7.0 -1.5
        -0.5 1.8
        0.5 1.8
        7.0 -1.5
        8.0 -1.5
        20.0 100.0

    """
    
    try:
        mass, x_axis_data, first_ev, last_ev, interpoltype, nr_interpol_p, interpolxydeclarations = _read_schrodinger2(os.path.join(dirname, "schrodinger.inp"))
        #print("Werte", mass, x_axis_data, first_ev, last_ev, interpoltype, nr_interpol_p, interpolxydeclarations)
    except FileNotFoundError:
        msg = "Input file or path was not found."
        print(msg)
    else:
        potential_data = Interpolation(interpolxydeclarations, x_axis_data, interpoltype = interpoltype)
        
        energie_data_slice, wavefunc_data, wavefunc_data_slice = solver(mass, potential_data, first_ev, last_ev, select_range=None)
        
        expvalues_data = calculate_expvalues(potential_data, wavefunc_data_slice)
        
        filesaver(dirname, potential_data, energie_data_slice, wavefunc_data, expvalues_data)
        
        plotting(dirname, potential_data, energie_data_slice, wavefunc_data, expvalues_data, x_bound=None)
        #print(potential_data)
        #print(energie_data_slice, wavefunc_data, expvalues_data)
        


if __name__ == "__main__":
    schrodinger_solver("InputOutput/Test2")
        